package org.xmlet.newParser

import org.w3c.dom.Node
import org.xmlet.utils.Utils.firstToUpper
import java.util.*

/**
 * Each of this elements will represent an Interface in the final library
 *
 * the interfaces will have default methods for each attribute
 *
 * the interfaces will extend CustomAttributeGroup or extend any other class if xsd:attributeGroup is present
 * */
class AttrGroup(name: String) : BaseObjectWithAttrs(name) {
    /**
     * If there is no xsd:attributeGroup then the default super class is CustomAttributeGroup
     * */
    init {
        references.add(DefaultSuperClassNames.CUSTOM_ATTRIBUTE_GROUP.value)
    }

    private var isDefaultPresent = true

    override val getFinalClassName: String = getUpperCaseName()


    /**
     * Method to check if the default value is present, if it is, remove it
     * */
    private fun removeCustomAttributeGroup() {
        if (isDefaultPresent) {
            references.remove(DefaultSuperClassNames.CUSTOM_ATTRIBUTE_GROUP.value)
            isDefaultPresent = false
        }
    }

    /**
     * This element might have a xsd:Attribute or a xsd:AttributeGroup both can can be present more than once
     * Example:
     * <xsd:attributeGroup name="globalAttributes">
     *      <xsd:attributeGroup ref="globalEventAttributes"/>       <---- node1
     *      <xsd:attribute name="accesskey" type="xsd:string" />    <---- node2
     *      <xsd:attribute name="class" type="xsd:string" />        <---- node3
     * <xsd:attributeGroup/>
     *
     * For each Attribute the key and value pairs are saved. Each pair will represent a method in the final class
     * If the type is not xsd: it means it's an Enum generated by the library
     * For the example above: default T attrAccesskey(String attrAccesskey) { ... }
     *
     * If there is a attributeGroup present it means the final class will not extend CustomAttributeGroup (therefore removed from the references)
     * it will Extend the attributeGroup present.
     * For the example above: public interface GlobalAttributes ... extends GlobalEventAttributes
     *
     * Note: the node parameter will represent ONE of the nodes above
     * @param
     * */
    override fun addValue(node: Node) {
        when(node.nodeName) {
            XsdElementNames.ATTRIBUTE.value ->
                attrValues.add(
                    Pair(
                        node.attributes.getNamedItem(AttributeKeyName.NAME.value).nodeValue,
                        node.attributes.getNamedItem(AttributeKeyName.TYPE.value).nodeValue
                    )
                )
            XsdElementNames.ATTRIBUTE_GROUP.value -> {
                removeCustomAttributeGroup()
                addReference(node.attributes.getNamedItem(AttributeKeyName.REF.value).nodeValue)
            }
        }
    }
}
